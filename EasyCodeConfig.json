{
  "author": "dclef",
  "version": "1.2.4",
  "userSecure": "",
  "currTypeMapperGroupName": "Default",
  "currTemplateGroupName": "crud改",
  "currColumnConfigGroupName": "Default",
  "currGlobalConfigGroupName": "Default",
  "typeMapper": {},
  "template": {
    "crud改": {
      "name": "crud改",
      "elementList": [
        {
          "name": "entity.java.vm",
          "code": "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\nimport lombok.Data;\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n//@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    #foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n\n#end\n\n}\n"
        },
        {
          "name": "mapper.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 查询指定行数据\n     *\n     * @param  query 查询条件\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> query($!{tableInfo.name}Query query);\n\n    /**\n     * 统计总行数\n     *\n     * @param query 查询条件\n     * @return 总行数\n     */\n    long count($!{tableInfo.name}Query query);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteById($!pk.shortType $!pk.name);\n\n}\n"
        },
        {
          "name": "query.java.vm",
          "code": "##引入宏定义\n$!{define.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Query\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/query\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}query;\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})高级查询+分页\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\npublic class  $!{tableName}  {\n    /**\n     * 当前页面\n     */\n    private Integer currentPage=1;\n    /**\n     * 页面大小\n     */\n    private Integer pageSize=10;\n\n    /**\n     * 关键字\n     */\n    private String keywords;\n\n    /**\n     * 得到开始指数\n     *\n     * @return {@link Integer}\n     *///计算分页开始索引\n    public Integer getBeginIndex(){\n        return (currentPage-1)*pageSize;\n    }\n\n}\n"
        },
        {
          "name": "service.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport java.util.Map;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n    Map<String,Object> page($!{tableInfo.name}Query query);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n\n}"
        },
        {
          "name": "sericeImpl.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.queryById($!pk.name);\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n    @Override\n    public Map<String,Object> page($!{tableInfo.name}Query query) {\n        Map<String, Object> map = new HashMap<>();\n        List<$tableInfo.name> list = $!{tool.firstLowerCase($tableInfo.name)}Mapper.query(query);\n        //有筛选条件的时候 计算的是 全部数据\n        Long count=$!{tool.firstLowerCase($tableInfo.name)}Mapper.count(query);\n        map.put(\"status\", \"success\");\n        //发送一次请求 计算总条数\n        map.put(\"totals\",count);\n        map.put(\"data\",list);\n        return map;\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.update($!tool.firstLowerCase($!{tableInfo.name}));\n        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name) > 0;\n    }\n}"
        },
        {
          "name": "mapper.xml.vm",
          "code": "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"query\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n     <where>\n\t\t\t<if test=\"keywords!=null and keywords!=''\">\n\t\t\t\tand title like concat('%',#{keywords},'%')\n\t\t\t</if>\n\t\t</where>\n\t\tlimit #{beginIndex},#{pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(*)\n        from $!tableInfo.obj.name\n         <where>\n\t\t<if test=\"keywords!=null and keywords!=''\">\n\t\t\tand title like concat('%',#{keywords},'%')\n\t\t\t</if>\n\t\t</where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"
        },
        {
          "name": "controller.java.vm",
          "code": "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport javax.annotation.Resource;\nimport java.util.Map;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Api(tags = \"模块\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n    @ApiOperation(value = \"分页查询\")\n    @RequestMapping(value =\"/list\",method = RequestMethod.GET, produces = \"application/json\")\n    public Map<String,Object> list($!{tableInfo.name}Query query) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.page(query);\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @ApiOperation(value = \"查询单条数据\")\n    @RequestMapping(value =\"/{id}\",method = RequestMethod.GET, produces = \"application/json\")\n    public ResponseEntity<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 新增结果\n     */\n    @ApiOperation(value = \"新增\")\n    @RequestMapping(value =\"/{id}\",method = RequestMethod.POST, produces = \"application/json\")\n    public ResponseEntity<$!{tableInfo.name}> add($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 编辑结果\n     */\n    @ApiOperation(value = \"修改\")\n    @RequestMapping(value =\"/{id}\",method = RequestMethod.PUT, produces = \"application/json\")\n    public ResponseEntity<$!{tableInfo.name}> edit($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    \n    @ApiOperation(value = \"删除\")\n    @RequestMapping(value =\"/{id}\",method = RequestMethod.DELETE, produces = \"application/json\")\n    public ResponseEntity<Boolean> deleteById(@PathVariable(\"id\")$!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n    }\n\n}\n"
        },
        {
          "name": "config.java.vm",
          "code": "\n##定义初始变量\n#set($tableName = $tool.append(\"Knife4jConfiguration\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/config\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config;\n\n$!{autoImport.vm}\nimport com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;\nimport com.github.xiaoymin.knife4j.spring.extension.OpenApiExtensionResolver;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n/**\n * swgger配置\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@EnableKnife4j\n@Configuration\n@EnableSwagger2WebMvc\npublic class Knife4jConfiguration {\n    /*引入Knife4j提供的扩展类*/\n    private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public Knife4jConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi\")\n    public Docket defaultApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .groupName(\"1.0版本\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"$!{tableInfo.savePackageName}.controller\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(\"默认接口\")\n                );\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.dclef.icu/\")\n                .contact(new Contact(\"dclef\", \"http://www.dclef.icu/\", \"drclef233@gmail.com\"))\n                .version(\"1.0\")\n                .build();\n\n    }\n\n\n}\n"
        }
      ]
    }
  },
  "columnConfig": {},
  "globalConfig": {}
}