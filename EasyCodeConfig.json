{"author":"dclef","version":"1.2.4","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"curd-抽取","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{},"template":{"swggerCRUD":{"name":"swggerCRUD","elementList":[{"name":"entity.java.vm","code":"#foreach($column in $tableInfo.fullColumn)\n    #if(!$!column.obj.name.contains(\"_\"))\n        ## 数据库字段名是驼峰命名\n        $!column.setName($!column.obj.name)\n    #else\n        ## 数据库字段名是下划线的方式命名\n        $!column.setName($tool.getJavaName($!column.obj.name))\n    #end\n#end\n\n\n$!{init.vm}\n##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\nimport lombok.Data;\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n//@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    #foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n    @ApiModelProperty(\"${column.comment}\")\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n\n\n\n}\n"},{"name":"mapper.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n      /**\n     * 查询所有\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAll();\n\n    /**\n     * 查询指定行数据\n     *\n     * @param  query 查询条件\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> query($!{tableInfo.name}Query query);\n\n    /**\n     * 统计总行数\n     *\n     * @param query 查询条件\n     * @return 总行数\n     */\n    long count($!{tableInfo.name}Query query);\n\n    /**\n     * 新增数据\n     *\n     */\n    void insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n\n  \n    /**\n     * 修改数据\n     *\n     */\n    void update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteById($!pk.shortType $!pk.name);\n\n}\n"},{"name":"query.java.vm","code":"##引入宏定义\n$!{define.vm}\n\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Query\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/query\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}query;\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})高级查询+分页\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\npublic class  $!{tableName}  {\n    /**\n     * 当前页面\n     */\n    private Integer currentPage=1;\n    /**\n     * 页面大小\n     */\n    private Integer pageSize=10;\n\n    /**\n     * 关键字\n     */\n    private String keywords;\n\n    /**\n     * 得到开始指数\n     *\n     * @return {@link Integer}\n     *///计算分页开始索引\n    public Integer getBeginIndex(){\n        return (this.currentPage-1)*pageSize;\n    }\n\n}\n"},{"name":"service.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport java.util.Map;\nimport java.util.List;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n   /**\n     * 查询所有\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAll();\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n    PageList<$tableInfo.name> queryPage($!{tableInfo.name}Query query);\n\n    /**\n     * 新增数据\n     *\n     */\n    void insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     */\n    void update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n\n}"},{"name":"sericeImpl.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\n@Transactional(readOnly = true,propagation = Propagation.SUPPORTS)\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.queryById($!pk.name);\n    }\n    /**\n     * 查询所有\n     * @return 列表\n     */\n    @Override\n    public List<$tableInfo.name> queryAll() {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.queryAll();\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n      @Override\n      public PageList<$tableInfo.name> queryPage($!{tableInfo.name}Query query) {\n        // 查询当前页的数据\n        List<$tableInfo.name> rows = $!{tool.firstLowerCase($tableInfo.name)}Mapper.query(query);\n        //查询总条数\n        Long total=$!{tool.firstLowerCase($tableInfo.name)}Mapper.count(query);\n\n        return new PageList<>(total,rows);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     */\n    @Override\n    @Transactional\n    public void insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     */\n    @Override\n    @Transactional\n    public void update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.update($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name) > 0;\n    }\n}"},{"name":"mapper.xml.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n  <!--  查询所有  -->\n    <select id=\"queryAll\" resultMap=\"$!{tableInfo.name}Map\">\n      select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n    </select>\n    <!--查询指定行数据-->\n    <select id=\"query\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n     <where>\n\t\t\t<if test=\"keywords!=null and keywords!=''\">\n\t\t\t\tand title like concat('%',#{keywords},'%')\n\t\t\t</if>\n\t\t</where>\n\t\tlimit #{beginIndex},#{pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(*)\n        from $!tableInfo.obj.name\n         <where>\n\t\t<if test=\"keywords!=null and keywords!=''\">\n\t\t\tand title like concat('%',#{keywords},'%')\n\t\t\t</if>\n\t\t</where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n  \n \n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n                $!column.obj.name = #{$!column.name},\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n<!--  批量删除-->\n    <delete id=\"deletePatch\">\n        delete\n        from  $!{tableInfo.obj.name} where $!pk.obj.name in\n        <foreach collection=\"list\" item=\"$!pk.obj.name\" separator=\",\" open=\"(\" close=\")\">\n            #{$!pk.name}\n        </foreach>\n    </delete>\n</mapper>\n"},{"name":"controller.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport javax.annotation.Resource;\nimport java.util.List;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Api(tags = \"模块\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n    @ApiOperation(value = \"分页查询\")\n    @RequestMapping(value =\"/page\",method = RequestMethod.GET, produces = \"application/json\")\n    public PageList<$tableInfo.name> page($!{tableInfo.name}Query query) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.queryPage(query);\n    }\n    \n   /**\n     * 查询所有\n     *\n     * @return 查询结果\n     */\n    @ApiOperation(value = \"查询所有\")\n    @RequestMapping(value =\"/list\",method = RequestMethod.GET, produces = \"application/json\")\n    public List<$tableInfo.name> list(){\n        return  this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryAll();\n    }\n    \n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @ApiOperation(value = \"查询单条数据\")\n    @RequestMapping(value =\"/{id}\",method = RequestMethod.GET, produces = \"application/json\")\n    public ResponseEntity<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * 新增或删除数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     */\n    @ApiOperation(value = \"新增或删除\")\n    @RequestMapping(method = RequestMethod.PUT, produces = \"application/json\")\n    public AjaxResult addOrUpdate($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n      try {\n            if ($!{tool.firstLowerCase($tableInfo.name)}.getId()==null){\n                $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)});\n            }else {\n                $!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)});\n            }\n            return AjaxResult.ok();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return AjaxResult\n                    .ok()\n                    .setSuccess(false)\n                    .setMessage(\"系统错误,请重试\");\n        }\n\n    }\n\n  \n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    \n    @ApiOperation(value = \"删除\")\n    @RequestMapping(value =\"/{id}\",method = RequestMethod.DELETE, produces = \"application/json\")\n     public AjaxResult deleteById(@PathVariable(\"id\")Long id) {\n        if (this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id)){\n            return AjaxResult.ok();\n        }else {\n             return AjaxResult\n                    .ok()\n                    .setSuccess(false)\n                    .setMessage(\"操作失败，请重试\");\n        }\n    }\n\n}\n"},{"name":"config.java.vm","code":"\n##定义初始变量\n#set($tableName = $tool.append(\"Knife4jConfiguration\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/config\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config;\n\n$!{autoImport.vm}\nimport com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;\nimport com.github.xiaoymin.knife4j.spring.extension.OpenApiExtensionResolver;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n/**\n * swgger配置\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@EnableKnife4j\n@Configuration\n@EnableSwagger2WebMvc\npublic class Knife4jConfiguration {\n    /*引入Knife4j提供的扩展类*/\n    private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public Knife4jConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi\")\n    public Docket defaultApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .groupName(\"1.0版本\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"$!{tableInfo.savePackageName}.controller\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(\"默认接口\")\n                );\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.dclef.icu/\")\n                .contact(new Contact(\"dclef\", \"http://www.dclef.icu/\", \"drclef233@gmail.com\"))\n                .version(\"1.0\")\n                .build();\n\n    }\n\n\n}\n"},{"name":"PageList.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"PageList\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/until\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}until;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * 分页工具类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\n//全参数构造器\n@AllArgsConstructor\n//无参构造器\n@NoArgsConstructor\npublic class PageList<T> {\n    /**\n     * 计算总条数\n     */\n    private  Long total;\n   \n    /**\n     * 列表展示\n     */\n    private  List<T> rows=new ArrayList<>();\n\n}"},{"name":"AjaxResult.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"AjaxResult\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/until\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}until;\nimport lombok.Data;\n\n/**\n * ajax请求的返回对象\n */\n@Data\npublic class AjaxResult {\n    private Boolean success = true;\n    private String message = \"操作成功！！\";\n\n    public static AjaxResult ok(){\n        return new AjaxResult();\n    }\n\n\n    public AjaxResult setSuccess(Boolean success) {\n        this.success = success;\n        //返回当前线程操作的对象\n        return this;\n    }\n\n    public AjaxResult setMessage(String message) {\n        this.message = message;\n        //返回当前线程操作的对象\n        return this;\n    }\n}\n"}]},"swggerCRUD-plus":{"name":"swggerCRUD-plus","elementList":[{"name":"controller.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\n$!{autoImport.vm}\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Api(tags = \"模块\")\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableInfo.name}Controller extends BaseController<$!{tableInfo.name}>{\n    /**\n     * 服务对象\n     */\n    @Autowired\n    private $!{tableInfo.name}Service $!{tool.firstLowerCase($tableInfo.name)}Service;\n\n    /**\n     * 增加或修改数据\n     *\n     * @return 编辑结果\n     */\n    @ApiOperation(value = \"增加或修改\")\n    @PutMapping\n    public AjaxResult insertOrUpdate($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        try {\n            if ($!{tool.firstLowerCase($tableInfo.name)}.getId()==null){\n                $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)});\n            }else {\n                $!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)});\n            }\n            return AjaxResult.ok();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return AjaxResult\n                    .ok()\n                    .setSuccess(false)\n                    .setMessage(\"系统错误,请重试\");\n        }\n    }\n}\n\n"},{"name":"entity.java.vm","code":"#foreach($column in $tableInfo.fullColumn)\n    #if(!$!column.obj.name.contains(\"_\"))\n        ## 数据库字段名是驼峰命名\n        $!column.setName($!column.obj.name)\n    #else\n        ## 数据库字段名是下划线的方式命名\n        $!column.setName($tool.getJavaName($!column.obj.name))\n    #end\n#end\n\n\n$!{init.vm}\n##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\nimport lombok.Data;\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n//@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    #foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n    @ApiModelProperty(\"${column.comment}\")\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n\n\n\n}\n"},{"name":"mapper.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\n$!{autoImport.vm}\n\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableInfo.name}Mapper extends BaseMapper<$!{tableInfo.name}> {\n\n\n\n}\n\n"},{"name":"query.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Query\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/query\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}query;\n\n$!{autoImport.vm}\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})高级查询+分页\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@EqualsAndHashCode(callSuper = true)\n@Data\npublic class $!{tableInfo.name}Query extends BaseQuery{\n\n}\n\n"},{"name":"service.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\n$!{autoImport.vm}\n\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableInfo.name}Service extends IBaseService<$!{tableInfo.name}> {\n\n\n\n}\n"},{"name":"serviceImpl.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\n$!{autoImport.vm}\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务层实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableInfo.name}ServiceImpl extends BaseServiceImpl<$!{tableInfo.name}> implements $!{tableInfo.name}Service {\n    @Resource(name=\"$!{tableInfo.name}Mapper\")\n    private $!{tableInfo.name}Mapper $!{tool.firstLowerCase($tableInfo.name)}Mapper;\n}\n"},{"name":"mapper.xml.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n  <!--  查询所有  -->\n    <select id=\"queryAll\" resultMap=\"$!{tableInfo.name}Map\">\n      select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n    </select>\n    <!--查询指定行数据-->\n    <select id=\"query\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n     <where>\n\t\t\t<if test=\"keywords!=null and keywords!=''\">\n\t\t\t\tand title like concat('%',#{keywords},'%')\n\t\t\t</if>\n\t\t</where>\n\t\tlimit #{beginIndex},#{pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(*)\n        from $!tableInfo.obj.name\n         <where>\n\t\t<if test=\"keywords!=null and keywords!=''\">\n\t\t\tand title like concat('%',#{keywords},'%')\n\t\t\t</if>\n\t\t</where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n  \n \n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n                $!column.obj.name = #{$!column.name},\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n<!--  批量删除-->\n    <delete id=\"deletePatch\">\n        delete\n        from  $!{tableInfo.obj.name} where $!pk.obj.name in\n        <foreach collection=\"list\" item=\"$!pk.obj.name\" separator=\",\" open=\"(\" close=\")\">\n            #{$!pk.name}\n        </foreach>\n    </delete>\n</mapper>\n"}]},"curd-抽取":{"name":"curd-抽取","elementList":[{"name":"BaseEntity.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"BaseEntity\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/entity\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}entity;\nimport lombok.Data;\n/**\n * domain实体层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\npublic class BaseEntity {\n    private Long id;\n}\n"},{"name":"BaseController.java.vm","code":"\n##定义初始变量\n#set($tableName = $tool.append(\"BaseController\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/controller\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\n$!{autoImport.vm}\nimport $!{tableInfo.savePackageName}.qeury.BaseQuery;\nimport $!{tableInfo.savePackageName}.service.IBaseService;\nimport $!{tableInfo.savePackageName}.util.AjaxResult;\nimport $!{tableInfo.savePackageName}.util.PageList;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic class BaseController<T> {\n    @Autowired(required=false)\n    private IBaseService<T> baseService;\n\n\n    @ApiOperation(value = \"查询所有数据\")\n    @GetMapping(\"/list\")\n    public List<T> queryAll() {\n        return baseService.queryAll();\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param query 筛选条件\n     * @return 查询结果\n     */\n    @ApiOperation(value = \"分页查询\")\n    @PostMapping(\"/page\")\n    public PageList<T> list(BaseQuery query) {\n        return baseService.page(query);\n\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @ApiOperation(value = \"查询单条数据\")\n    @PostMapping(\"/{id}\")\n    public ResponseEntity<T> queryById(@PathVariable(\"id\") Long id) {\n        return ResponseEntity.ok(this.baseService.queryById(id));\n    }\n\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @ApiOperation(value = \"删除\")\n    @DeleteMapping(\"/{id}\")\n    public AjaxResult deleteById(@PathVariable(\"id\") Long id) {\n        if (this.baseService.deleteById(id)){\n            return   AjaxResult.ok();\n        }else {\n            return AjaxResult\n                    .ok()\n                    .setSuccess(false)\n                    .setMessage(\"操作失败\");\n        }\n    }\n    @ApiOperation(value = \"批量删除\")\n    @PatchMapping\n    public AjaxResult deletePatch(@RequestBody List<Long>ids) {\n        if (this.baseService.deletePatch(ids)){\n            return   AjaxResult.ok();\n        }else {\n            return AjaxResult\n                    .ok()\n                    .setSuccess(false)\n                    .setMessage(\"操作失败\");\n        }\n    }\n\n//    /**\n//     * 新增数据\n//     *\n//     * @param t 实体\n//     * @return 新增结果\n//     */\n//    @ApiOperation(value = \"新增\")\n//    @PostMapping\n//    public AjaxResult add(T t) {\n//        this.baseService.insert(t);\n//        return AjaxResult.ok();\n//    }\n//    /**\n//     * 编辑数据\n//     *@param t 实体\n//     * @return 编辑结果\n//     */\n//    @ApiOperation(value = \"修改\")\n//    @PutMapping\n//    public AjaxResult edit(T t) {\n//        this.baseService.update(t);\n//        return AjaxResult.ok();\n//    }\n\n\n\n//    /**\n//     * 增加或修改数据\n//     *\n//     * @param t 实体\n//     * @return 编辑结果\n//     */\n//    @OperLog(operModul = \"增加或修改数据\", operType = \"insertOrUpdate\", operDesc = \"增加或修改数据测试\")\n//    @ApiOperation(value = \"增加或修改\")\n//    @PutMapping\n//    public AjaxResult insertOrUpdate(@RequestBody TDepartment tDepartment) {\n//        try {\n//            if (tDepartment.getId()==null){\n//                tDepartmentService.insert(tDepartment);\n//            }else {\n//                tDepartmentService.update(tDepartment);\n//            }\n//            return AjaxResult.ok();\n//        } catch (Exception e) {\n//            e.printStackTrace();\n//            return AjaxResult\n//                    .ok()\n//                    .setSuccess(false)\n//                    .setMessage(\"系统错误,请重试\");\n//        }\n//    }\n}\n"},{"name":"BaseMapper.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"BaseMapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/mapper\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\nimport $!{tableInfo.savePackageName}.qeury.BaseQuery;\n\nimport java.util.List;\n\n/**\n * mapper层\n * @author $!author\n * @since $!time.currTime()\n */\n\npublic interface BaseMapper<T> {\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param id 主键\n     * @return 实例对象\n     */\n    T queryById(Long id);\n\n    /**\n     * 查询指定行数据\n     *\n     * @param query 查询条件\n     * @return 对象列表\n     */\n    List<T> query(BaseQuery query);\n\n\n    /**\n     * 查询所有\n     * @return 对象列表\n     */\n    List<T> queryAll();\n\n    /**\n     * 统计总行数\n     *\n     * @param query 查询条件\n     * @return 总行数\n     */\n    long count(BaseQuery query);\n\n    /**\n     * 新增数据\n     *\n     * @param T 实例对象\n     */\n    void insert(T T);\n\n\n    /**\n     * 修改数据\n     *\n     * @param T 实例对象\n     */\n    void update(T T);\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param id 主键\n     */\n    boolean deleteById(Long id);\n\n    /**\n     * 批量删除数据\n     * @param ids ids\n     * @return 影响行数\n     */\n    boolean deletePatch(List<Long> ids);\n\n}\n"},{"name":"BaseQuery.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"BaseQuery\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/query\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}query;\n\n\nimport lombok.Data;\n\n/**\n * 分页+高级查询\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\npublic class BaseQuery {\n    /**\n     * 当前页面\n     */\n    private Integer currentPage = 1;\n    /**\n     * 页面大小\n     */\n    private Integer pageSize = 10;\n\n    /**\n     * 关键字\n     */\n    private String keywords;\n\n    /**\n     * 计算分页开始索引\n     * @return {@link Integer}\n     */\n    public Integer getBeginIndex() {\n        return (this.currentPage - 1) * pageSize;\n    }\n\n}\n"},{"name":"IBaseService.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"IBaseService\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/service\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.qeury.BaseQuery;\nimport $!{tableInfo.savePackageName}.util.PageList;\n\nimport java.util.List;\n\n/**\n * service层\n * @author $!author\n * @since $!time.currTime()\n */\n\npublic interface IBaseService<T> {\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param id 主键\n     * @return 实例对象\n     */\n    T queryById(Long id);\n\n    /**\n     * 查询指定行数据\n     *\n     * @param query 查询条件\n     * @return 对象列表\n     */\n    PageList<T> page(BaseQuery query);\n\n\n    /**\n     * 查询所有\n     * @return 对象列表\n     */\n    List<T> queryAll();\n\n\n    /**\n     * 新增数据\n     *\n     * @param t 实例对象\n     */\n    void insert(T t);\n\n\n    /**\n     * 修改数据\n     *\n     * @param t 实例对象\n     */\n    void update(T t);\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param id 主键\n     * @return id\n     */\n    boolean deleteById(Long id);\n\n    /**\n     * 批量删除数据\n     * @param ids ids\n     * @return 影响行数\n     */\n    boolean deletePatch(List<Long> ids);\n\n}\n"},{"name":"BaseServiceImpl.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"BaseServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/service/impl\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.qeury.BaseQuery;\nimport $!{tableInfo.savePackageName}.service.IBaseService;\nimport $!{tableInfo.savePackageName}.util.PageList;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n/**\n * impl层\n * @author $!author\n * @since $!time.currTime()\n */\n@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\npublic class BaseServiceImpl<T> implements IBaseService<T>  {\n    @Autowired\n    private BaseMapper<T> mapper;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param id 主键\n     * @return 实例对象\n     */\n    @Override\n    public T queryById(Long id) {\n        return mapper.queryById(id);\n    }\n\n    /**\n     * 查询指定行数据\n     *\n     * @param query 查询条件\n     * @return 对象列表\n     */\n    @Override\n    public PageList<T> page(BaseQuery query) {\n        // 查询当前页的数据\n        List<T> rows = mapper.query(query);\n        //查询总条数\n        Long total = mapper.count(query);\n        //查询成功的信息\n        return new PageList<>(total, rows);\n    }\n\n    /**\n     * 查询所有\n     *\n     * @return 对象列表\n     */\n    @Override\n    public List<T> queryAll() {\n        return mapper.queryAll();\n    }\n\n\n\n    /**\n     * 新增数据\n     *\n     * @param t 实例对象\n     */\n    @Transactional\n    @Override\n    public void insert(T t) {\n        mapper.insert(t);\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param t 实例对象\n     */\n    @Transactional\n    @Override\n    public void update(T t) {\n        mapper.update(t);\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param id 主键\n     */\n    @Override\n    public boolean deleteById(Long id) {\n        return mapper.deleteById(id) ;\n    }\n\n    /**\n     * 批量删除数据\n     *\n     * @param ids ids\n     * @return 影响行数\n     */\n\n    @Override\n    public boolean deletePatch(List<Long> ids) {\n        return mapper.deletePatch(ids);\n    }\n}\n"},{"name":"PageList.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"PageList\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/until\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}until;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * 分页工具类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\n//全参数构造器\n@AllArgsConstructor\n//无参构造器\n@NoArgsConstructor\npublic class PageList<T> {\n    /**\n     * 计算总条数\n     */\n    private  Long total;\n   \n    /**\n     * 列表展示\n     */\n    private  List<T> rows=new ArrayList<>();\n\n}"},{"name":"AjaxResult.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"AjaxResult\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/until\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}until;\nimport lombok.Data;\n\n/**\n * ajax请求的返回对象\n */\n@Data\npublic class AjaxResult {\n    private Boolean success = true;\n    private String message = \"操作成功！！\";\n\n    public static AjaxResult ok(){\n        return new AjaxResult();\n    }\n\n\n    public AjaxResult setSuccess(Boolean success) {\n        this.success = success;\n        //返回当前线程操作的对象\n        return this;\n    }\n\n    public AjaxResult setMessage(String message) {\n        this.message = message;\n        //返回当前线程操作的对象\n        return this;\n    }\n}\n"},{"name":"GlobalCorsConfig.java.vm","code":"$!{init.vm}\n##引入宏定义\n$!{define.vm}\n##定义初始变量\n#set($tableName = $tool.append(\"GlobalCorsConfig\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/config\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n/**\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Configuration\npublic class GlobalCorsConfig {\n    @Bean\n    public CorsFilter corsFilter() {\n        //添加CORS配置信息\n        CorsConfiguration config = new CorsConfiguration();\n        //允许的域,不要写*，否则cookie就无法使用了\n        config.addAllowedOrigin(\"http://127.0.0.1:8081\");\n        config.addAllowedOrigin(\"http://localhost:8081\");\n        config.addAllowedOrigin(\"http://127.0.0.1:80\");\n        config.addAllowedOrigin(\"http://localhost:80\");\n        config.addAllowedOrigin(\"http://127.0.0.1\");\n        config.addAllowedOrigin(\"http://localhost\");\n        config.addAllowedOrigin(\"http://localhost:8080\");\n\n        //是否发送Cookie信息\n        config.setAllowCredentials(true);\n        //允许的请求方式\n        config.addAllowedMethod(\"OPTIONS\");\n        config.addAllowedMethod(\"HEAD\");\n        config.addAllowedMethod(\"GET\");\n        config.addAllowedMethod(\"PUT\");\n        config.addAllowedMethod(\"POST\");\n        config.addAllowedMethod(\"DELETE\");\n        config.addAllowedMethod(\"PATCH\");\n        //允许的头信息\n        config.addAllowedHeader(\"*\");\n        //添加映射路径，我们拦截一切请求\n        UrlBasedCorsConfigurationSource configSource = new\n                UrlBasedCorsConfigurationSource();\n        configSource.registerCorsConfiguration(\"/**\", config);\n        //3.返回新的CorsFilter.\n        return new CorsFilter(configSource);\n    }\n}"},{"name":"Knife4jConfiguration.java.vm","code":"\n##定义初始变量\n#set($tableName = $tool.append(\"Knife4jConfiguration\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath,\"/config\"))\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}config;\n\n$!{autoImport.vm}\nimport com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;\nimport com.github.xiaoymin.knife4j.spring.extension.OpenApiExtensionResolver;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n/**\n * swgger配置\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@EnableKnife4j\n@Configuration\n@EnableSwagger2WebMvc\npublic class Knife4jConfiguration {\n    /*引入Knife4j提供的扩展类*/\n    private final OpenApiExtensionResolver openApiExtensionResolver;\n\n    @Autowired\n    public Knife4jConfiguration(OpenApiExtensionResolver openApiExtensionResolver) {\n        this.openApiExtensionResolver = openApiExtensionResolver;\n    }\n\n    @Bean(value = \"defaultApi\")\n    public Docket defaultApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .groupName(\"1.0版本\")\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"$!{tableInfo.savePackageName}.controller\"))\n                .paths(PathSelectors.any())\n                .build()\n                .extensions(openApiExtensionResolver.buildExtensions(\"默认接口\")\n                );\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"RESTful APIs\")\n                .description(\"# swagger-bootstrap-ui-demo RESTful APIs\")\n                .termsOfServiceUrl(\"http://www.dclef.icu/\")\n                .contact(new Contact(\"dclef\", \"http://www.dclef.icu/\", \"drclef233@gmail.com\"))\n                .version(\"1.0\")\n                .build();\n\n    }\n\n\n}\n"}]}},"columnConfig":{},"globalConfig":{"Default":{"name":"Default","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"t_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}